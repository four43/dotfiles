#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import argcomplete
import argparse
import requests
from requests.auth import HTTPBasicAuth
import os
from typing import Dict, Iterator, Any, Optional

url = f"https://medialogicgroup.atlassian.net/rest/api/3"

username = os.environ["AW_CONFLUENCE_USERNAME"]
app_password = os.environ["AW_CONFLUENCE_PASSWORD"]
auth = HTTPBasicAuth(username, app_password)
headers = {
    "Accept": "application/json"
}


def query_jira(path: str, params: Optional[Dict[str, Any]] = None, paged: bool = True) -> Iterator[Dict[str, Any]]:
    while True:
        get_res = requests.request(
            "GET",
            url=f"{url}{path}",
            params=params,
            headers=headers,
            auth=auth
        )
        get_res.raise_for_status()
        response_data = get_res.json()

        if paged:
            yield from response_data["values"]
        else:
            return response_data

        if response_data["isLast"]:
            break


def get_projects(query: Optional[str] = None) -> Iterator[Dict[str, Any]]:
    yield from query_jira("/project/search", {
        "query": query,
    })


def get_users(query: Optional[str] = None) -> Iterator[Dict[str, Any]]:
    users = list(query_jira("/users/search", paged=False))
    return [u for u in users if u["displayName"].startswith(query)]


def projectCompleter(prefix: str, action: Optional[argparse.Action] = None,
                     parser: Optional[argparse.ArgumentParser] = None,
                     parsed_args: Optional[argparse.Namespace] = None):
    projects = get_projects(prefix)
    return [p["name"] for p in projects]


def userCompleter(prefix: str, action: Optional[argparse.Action] = None,
                     parser: Optional[argparse.ArgumentParser] = None,
                     parsed_args: Optional[argparse.Namespace] = None):
    users = get_users(prefix)
    return [u["displayName"] for u in users]


parser = argparse.ArgumentParser()
parser.add_argument("project").completer = projectCompleter
parser.add_argument("assignee").completer = userCompleter
parser.add_argument("title")
parser.add_argument("-d", "--description")
parser.add_argument("-b", "--backlog")

if __name__ == '__main__':
    argcomplete.autocomplete(parser)

    userCompleter("Se")
    args = parser.parse_args()
